{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-form.js"],"sourcesContent":["// Чекаємо щоб вся структура сторінки буде завантажена. \n//Событие DOMContentLoaded запускается когда первоначальный HTML документ \n//будет полностью загружен и разобран, без ожидания полной загрузки таблиц стилей, изображений и фреймов.\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  \n    const form = document.querySelector('.feedback-form');\n  \n    // Функція для ЗБЕРЕЖЕННЯ стану форми в локальне сховище.\n    const saveFormState = () => {\n      //  formData зі значеннями полів email і message форми. значение без пробелов.\n      const formData = {\n        email: form.email.value.trim(), // Отримуємо значення поля email.\n        message: form.message.value.trim() // Отримуємо значення поля message.\n\n//Метод trim() возвращает строку с вырезанными пробельными символами с её концов.\n// Метод trim() не изменяет значение самой строки.\n      };\n\n      // Зберігаємо(.setItem) об'єкт formData у локальному сховищі під ключем 'feedback-form-state'. JSON. stringify() преобразует значение в представляющую его нотацию JSON \n      localStorage.setItem('feedback-form-state', JSON.stringify(formData));\n    };\n  \n    // Функція дляЗАВАНТАЖЕННЯ стану форми з локального сховища.\n    const loadFormState = () => {\n      // Отримуємо (.getItem ) збережений стан форми з локального сховища.\n      const savedState = localStorage.getItem('feedback-form-state');\n      // Перевіряємо, чи є збережений стан.\n      if (savedState) {\n        // Розпаковуємо збережений об'єкт formData з формату JSON.parse()- метод конвертирует строку в формате JSON обратно в объект JavaScript\n        const formData = JSON.parse(savedState);\n        // Заповнюємо поля форми зі значеннями збереженого стану.\n        form.email.value = formData.email; \n        form.message.value = formData.message; \n      }\n    };\n  \n    // Викликаємо функцію для завантаження стану форми при першому завантаженні сторінки.\n    loadFormState();\n  \n    // СЛУХАЧА  на input на формі для збереження стану форми при введенні даних.\n    form.addEventListener('input', saveFormState);\n  \n    // Обробляємо подію submit на формі.\n    form.addEventListener('submit', (event) => {\n      event.preventDefault(); // Відмінюємо стандартну поведінку форми.\n  \n      // Отримуємо значення полів email та message і видаляємо зайві пробіли з країв.\n      const email = form.email.value.trim();\n      const message = form.message.value.trim();\n  \n      // Перевіряємо, чи заповнені обидва поля форми.\n      if (email && message) {\n        // Якщо так, виводимо об'єкт з email та message в консоль.\n        console.log({ email, message });\n        // Видаляємо збережений стан форми з локального сховища.\n        localStorage.removeItem('feedback-form-state');\n        // Очищуємо поля форми.\n        form.reset();\n      } else {\n        // Якщо якесь з полів не заповнене, показуємо сповіщення.\n        alert('Please fill out all fields!');\n      }\n    });\n  });\n  "],"names":["form","saveFormState","formData","savedState","event","email","message"],"mappings":"oCAIA,SAAS,iBAAiB,mBAAoB,IAAM,CAEhD,MAAMA,EAAO,SAAS,cAAc,gBAAgB,EAG9CC,EAAgB,IAAM,CAE1B,MAAMC,EAAW,CACf,MAAOF,EAAK,MAAM,MAAM,KAAM,EAC9B,QAASA,EAAK,QAAQ,MAAM,KAAM,CAI1C,EAGM,aAAa,QAAQ,sBAAuB,KAAK,UAAUE,CAAQ,CAAC,CAC1E,GAG0B,IAAM,CAE1B,MAAMC,EAAa,aAAa,QAAQ,qBAAqB,EAE7D,GAAIA,EAAY,CAEd,MAAMD,EAAW,KAAK,MAAMC,CAAU,EAEtCH,EAAK,MAAM,MAAQE,EAAS,MAC5BF,EAAK,QAAQ,MAAQE,EAAS,OAC/B,CACP,KAMIF,EAAK,iBAAiB,QAASC,CAAa,EAG5CD,EAAK,iBAAiB,SAAWI,GAAU,CACzCA,EAAM,eAAc,EAGpB,MAAMC,EAAQL,EAAK,MAAM,MAAM,KAAI,EAC7BM,EAAUN,EAAK,QAAQ,MAAM,KAAI,EAGnCK,GAASC,GAEX,QAAQ,IAAI,CAAE,MAAAD,EAAO,QAAAC,CAAS,CAAA,EAE9B,aAAa,WAAW,qBAAqB,EAE7CN,EAAK,MAAK,GAGV,MAAM,6BAA6B,CAE3C,CAAK,CACL,CAAG"}